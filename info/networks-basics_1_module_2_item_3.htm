<!DOCTYPE html>
<html class="" lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">


<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/octicons-3.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/core.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/text.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/extended-ui-kit.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/up.css"><meta name="theme-color" content="#2d2d44">

</head><body>

              <div class="page-content "><div class="page-content__inner"><div class="up-interface up-interface--up "><section class="up-interface__left-col"><nav class="breadcrumbs"><ul class="breadcrumbs__list"><li class="breadcrumbs__item"><a href="../index.htm">Главная</a></li><li class="breadcrumbs__item"><a href="networks-basics_1_module_2.htm">2. Защита данных</a></li></ul></nav><article class="up-text"><div class="up-text__head"><h1 class="up-text__title"><svg aria-hidden="true" width="24" height="24"><use xlink:href="/img/sprites/octicons.v10.svg#file-16"></use></svg>
          2.3.&nbsp;Аутентификация по&nbsp;сертификатам
        </h1></div><div class="text-container text-container--module"><p>Большинство
 современных приложений состоят из&nbsp;клиентов (браузеров, смартфонов)
 и&nbsp;серверов, где хранятся отправленные клиентами данные. 
А&nbsp;значит, нужны системы, гарантирующие, что доступ 
к&nbsp;сохранённым данным будет
предоставлен только пользователю, которому они принадлежат.</p><p>Термин
 «аутентификация» применяется для описания потока данных, который 
позволяет системе идентифицировать пользователя. Другими словами, 
системы аутентификации дают понять, что Ivan123 на&nbsp;самом деле 
Ivan123, а&nbsp;не
King1986.</p><p>Термин «авторизация» используют для описания процесса 
внутри системы, с&nbsp;помощью которого пользователь может подтвердить 
право на&nbsp;доступ к&nbsp;определённым ресурсам. Например, 
у&nbsp;Ivan123 должен быть доступ только к&nbsp;тем личным фото, которые
 он&nbsp;сам загрузил. Для King1988 эти фотографии должны быть 
недоступны. Оба процесса имеют решающее значение для контроля 
безопасности работы веб-приложений.</p><h2>Как отправляются данные</h2><p>Давайте
 рассмотрим процесс безопасной отправки данных с&nbsp;помощью TLS 
с&nbsp;одного компьютера на&nbsp;другой. Передающий компьютер 
мы&nbsp;будем называть клиентом, а&nbsp;принимающий&nbsp;— сервером.</p><h3>«Рукопожатие» TCP</h3><p>Поскольку
 TLS построен поверх TCP/IP, клиент должен сначала завершить 
трёхстороннее установление связи TCP с&nbsp;сервером. Этот процесс 
мы&nbsp;уже рассматривали:</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-1.jpeg" alt="Трёхстороннее установление связи TCP с сервером"></p><p>Первый
 компьютер отправляет пакет с&nbsp;битом SYN (SYN = 
«Синхронизировать?»). Второй компьютер отправляет обратно пакет 
с&nbsp;битом ASK (ASK = «Подтвердить!») Плюс бит&nbsp;SYN. Первый 
компьютер отвечает&nbsp;ASK. Три пакета, участвующие в&nbsp;тройном 
«рукопожатии», обычно не&nbsp;содержат никаких данных. После завершения 
«рукопожатия» компьютеры готовы принимать пакеты, содержащие фактические
 данные.</p><p>Что&nbsp;же происходит дальше для установления безопасного соединения?</p><h3>Инициирование TLS</h3><p>Клиент
 должен предупредить сервер о&nbsp;том, что ему требуется соединение TLS
 вместо стандартного небезопасного соединения. Поэтому 
он&nbsp;отправляет сообщение с&nbsp;описанием версии протокола TLS, 
а&nbsp;также предпочитаемые методы шифрования:</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-2.jpeg" alt="Инициирование TLS"></p><h3>Сервер подтверждает протокол</h3><p>Сервер
 прервёт соединение, если он&nbsp;не&nbsp;поддерживает запрошенные 
клиентом технологии. Это может произойти, если современный клиент 
пытается связаться со&nbsp;старым сервером.</p><p>Если сервер 
поддерживает запрошенную версию протокола TLS и&nbsp;другие параметры, 
он&nbsp;ответит подтверждением, SSL-сертификатом (Private Key) 
и&nbsp;открытым ключом (Public Key).</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-3.jpeg" alt="Сервер подтверждает протокол"></p><h3>Проверка сертификата</h3><p>SSL-сертификат
 сервера&nbsp;— это способ сервера сказать: «Да, я&nbsp;действительно 
тот, кем вы&nbsp;меня считаете». Если клиент не&nbsp;верит 
в&nbsp;подлинность сертификата, он&nbsp;прервёт соединение, поскольку 
не&nbsp;хочет отправлять личные данные самозванцу. Но&nbsp;если клиент 
успешно проверил сертификат, он&nbsp;переходит к&nbsp;следующему шагу.</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-4.jpeg" alt="Проверка сертификата"></p><h3>Генерация общего ключа</h3><p>В&nbsp;этот
 момент клиенту уже известен открытый ключ сервера. Теперь он&nbsp;может
 зашифровать данные при помощи открытого ключа, а&nbsp;затем сервер 
может расшифровать их&nbsp;с&nbsp;помощью SSL-ключа.</p><p>Шифрование 
с&nbsp;открытым ключом занимает гораздо больше времени, чем симметричное
 шифрование. Симметричное шифрование&nbsp;— это когда один 
и&nbsp;тот&nbsp;же ключ используется для шифрования и&nbsp;дешифрования.
 Это происходит из-за более сложных арифметических операций. 
По&nbsp;возможности предпочитают использовать симметричное шифрование 
для экономии времени.</p><p>Компьютеры могут сначала использовать 
шифрование с&nbsp;открытым ключом, чтобы в&nbsp;частном порядке 
сгенерировать общий ключ, а&nbsp;затем они могут использовать 
симметричное шифрование с&nbsp;этим ключом в&nbsp;будущих сообщениях. 
Точный метод генерации ключа зависит от&nbsp;выбранного шифронабора. 
Самые распространённые из&nbsp;них&nbsp;— RSA и&nbsp;Диффи-Хеллман.</p><p>Клиент
 начинает процесс с&nbsp;отправки сообщения на&nbsp;сервер 
с&nbsp;предварительным ключом (Pre-Master Secret), зашифрованным 
открытым ключом сервера. Клиент вычисляет общий ключ на&nbsp;основе 
этого предварительного ключа (поскольку это более безопасно, чем 
отправка фактического общего ключа) и&nbsp;запоминает общий ключ 
локально.</p><p>Клиент также отправляет сообщение «Готово», содержимое которого зашифровано с&nbsp;помощью общего ключа.</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-5.jpeg" alt="Генерация общего ключа"></p><h3>Сервер подтверждает общий ключ</h3><p>Теперь
 сервер может вычислить общий ключ на&nbsp;основе предварительного 
общего ключа и&nbsp;попытаться расшифровать сообщение «Готово» 
с&nbsp;помощью этого ключа. В&nbsp;случае сбоя соединение прерывается.</p><p>Если
 сервер расшифровал сообщение клиента с&nbsp;помощью общего ключа, 
он&nbsp;отправляет подтверждение и&nbsp;собственное сообщение «Готово» 
с&nbsp;зашифрованным содержимым.</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-6.jpeg" alt="Сервер подтверждает общий ключ"></p><h3>Отправка защищённых данных</h3><p>Теперь клиент при помощи симметричного шифрования и&nbsp;общего ключа безопасно отправляет личные данные на&nbsp;сервер.</p><p>Часто
 одному и&nbsp;тому&nbsp;же клиенту необходимо отправлять данные 
на&nbsp;сервер несколько&nbsp;раз. Например, когда пользователь 
заполняет формы на&nbsp;нескольких страницах веб-сайта. В&nbsp;этом 
случае компьютеры могут использовать сокращённый процесс для 
установления безопасного сеанса.</p><p><img src="networks-basics_1_module_2_item_3_files/authentication-7.jpeg" alt="Отправка защищённых данных"></p><p>Если вы&nbsp;хотите посмотреть подробнее, какие данные отправляется в&nbsp;каждом из&nbsp;шагов, посмотрите проект <a href="https://tls.ulfheim.net/">The Illustrated TLS Connection</a>.</p><h2>Подведём итог</h2><p>SSL/TLS
 используется для многих форм безопасного обмена данными 
в&nbsp;интернете, таких как отправка электронной почты и&nbsp;загрузка 
файлов. Тем не&nbsp;менее он&nbsp;наиболее известен своим использованием
 при безопасном просмотре веб-сайтов (HTTPS).</p><p>SSL/TLS обеспечивает
 уровень безопасности поверх TCP/IP благодаря использованию как 
открытого ключа, так и&nbsp;симметричного шифрования. Он&nbsp;становится
 всё более необходимым для защиты частных данных при передаче через 
интернет.</p></div>


                      </div></div></div>



</body></html>