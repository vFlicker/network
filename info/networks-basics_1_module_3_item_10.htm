<!DOCTYPE html>
<html class="" lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">


<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/octicons-3.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/core.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/text.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/extended-ui-kit.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/up.css"><meta name="theme-color" content="#2d2d44">

</head><body>

              <div class="page-content "><div class="page-content__inner"><div class="up-interface up-interface--up "><section class="up-interface__left-col"><nav class="breadcrumbs"><ul class="breadcrumbs__list"><li class="breadcrumbs__item"><a href="../index.htm">Главная</a></li><li class="breadcrumbs__item"><a href="networks-basics_1_module_3.htm">3. HTTP, HTTP/2, HTTP/3</a></li></ul></nav><article class="up-text"><div class="up-text__head"><h1 class="up-text__title"><svg aria-hidden="true" width="24" height="24"><use xlink:href="/img/sprites/octicons.v10.svg#file-16"></use></svg>
          3.10.&nbsp;Как перевести веб-приложение на&nbsp;HTTP/2
        </h1></div><div class="text-container text-container--module"><p>Преобразование
 протокола HTTP/1.1 в&nbsp;HTTP/2 происходит автоматически 
и&nbsp;обратно совместимо. Если что-то пойдёт не&nbsp;так, 
вы&nbsp;сможете вернуться назад.</p><p>Часто для переключения ничего 
не&nbsp;нужно делать, главное&nbsp;— убедиться, что ваш сервер 
поддерживает HTTP/2. Оптимизация веб-приложения в&nbsp;основном состоит 
из&nbsp;удаления всех оптимизаций для HTTP/1.1 и&nbsp;создания новых для
 HTTP/2.2.</p><p>Ниже мы&nbsp;рассмотрим решение: что делать, если ваш сервер не&nbsp;поддерживает HTTP/2 «из&nbsp;коробки».</p><h2>1. Проверьте, полезен&nbsp;ли переход на&nbsp;HTTP/2 для пользователей вашего веб-приложения</h2><p>Посмотрите
 данные аналитики, чтобы понять, использует&nbsp;ли большинство ваших 
посетителей веб-браузеры с&nbsp;поддержкой HTTP/2.</p><p>Например, в&nbsp;Google Analytics:</p><ol><li>Откройте Google Analytics и&nbsp;выберите профиль веб-приложения.</li><li>Перейдите в&nbsp;отчёт «Аудитория» &gt; «Технологии» &gt; «Браузер и&nbsp;ОС».</li><li>По&nbsp;умолчанию основным выбранным параметром будет «Браузеры».</li><li>Измените дополнительный параметр на&nbsp;«Пользователи» &gt; «Версия браузера».</li><li>Вы&nbsp;увидите таблицу всех браузеров и&nbsp;версий, которые ваши посетители используют для просмотра сайта.</li></ol><h2>2. Проверьте серверное программное обеспечение</h2><p>Свяжитесь
 с&nbsp;хостинговой компанией и&nbsp;узнайте, какую систему используют 
ваши веб-серверы&nbsp;— вероятно, Apache или NGINX. Уточните, 
поддерживает&nbsp;ли текущая версия системы HTTP/2 «из&nbsp;коробки». 
Например, Apache начал поддерживать HTTP/2 с&nbsp;версии 2.4.17, 
NGINX&nbsp;— 1.9.5. При этом убедитесь, что ваш сервер продолжит 
поддерживать всех пользователей HTTP/1.x в&nbsp;качестве запасного 
варианта.</p><p>Полный список программного обеспечения, поддерживающего HTTP/2, можно найти в&nbsp;<a href="https://github.com/httpwg/http2-spec/wiki/Implementations">официальной документации</a>. Проверить версию сервера также можно с&nbsp;помощью сервиса <a href="https://http2.pro/">http2.pro</a>.</p><h2>3. Проверьте, установлен&nbsp;ли SSL-сертификат</h2><p>Переход
 на&nbsp;HTTP/2 почти бесполезен, если на&nbsp;вашем сервере нет 
SSL-сертификата. Большинство браузеров просто проигнорируют 
HTTP/2-версию веб-сайта, если она не&nbsp;защищена. Поэтому установите 
SSL-сертификат.</p><h2>4. Оптимизируйте Javascript и&nbsp;CSS для HTTP/2</h2><p>Теперь избавимся от&nbsp;оптимизации под HTTP, которая для HTTP/2 неактуальна.</p><p>По&nbsp;мере
 развития веб-разработки были созданы методы, позволяющие ускорить 
загрузку веб-сайтов по&nbsp;протоколу HTTP/1. После переключения 
на&nbsp;HTTP/2 некоторые из&nbsp;них отключатся, поэтому логично 
их&nbsp;отменить.</p><p>Например, общая рекомендация для HTTP/1 
заключалась в&nbsp;том, чтобы уменьшить количество файлов CSS 
и&nbsp;Javascript, на&nbsp;которые есть ссылки в&nbsp;исходном коде, 
и&nbsp;объединить их&nbsp;в&nbsp;одни файлы. Это имеет смысл для 
протокола HTTP/1, поскольку веб-страницы загружаются постепенно, 
от&nbsp;начала до&nbsp;конца. Быстрее загрузить один большой файл 
со&nbsp;всеми CSS или JavaScript, чем иметь отдельные файлы для каждой 
части веб-приложения. Недостатком этой практики является то, что при 
каждом небольшом изменении CSS и&nbsp;JavaScript ваш веб-сайт должен 
обновлять весь большой файл, а&nbsp;пользователям приходится загружать 
ненужный код.</p><p>Благодаря преимуществам скорости HTTP/2 можно 
загружать только тот код JavaScript или CSS, который действительно 
требуется пользователю при посещении конкретной страницы.</p><p>Пожалуй,
 это самая объёмная часть перехода на&nbsp;HTTP/2. Она необязательна, 
но&nbsp;необходима, чтобы воспользоваться максимальными преимуществами 
протокола. Если веб-приложение большое, то&nbsp;можно оставить как есть 
и&nbsp;использовать уже для разработки новых частей.</p><p>Для 
оптимизации нужно проверить каждый URL-адрес на&nbsp;сайте, чтобы 
определить, какие именно JS&nbsp;и&nbsp;CSS используются на&nbsp;каждой 
странице. После этого необходимо разработать автоматизированную систему,
 которая условно загружает соответствующий код для каждого URL-адреса 
по&nbsp;запросу пользователя.</p><h2>5. Спрайты</h2><p>Аналогично 
со&nbsp;спрайтами&nbsp;— другим популярным методом, предназначенным для 
повышения производительности веб-приложений под HTTP/1.x.</p><p>До&nbsp;использования
 HTTP/2 и&nbsp;SPDY каждый запрос ресурсов страницы требовал 
значительных затрат времени. Каждое новое изображение означало 
дополнительные миллисекунды загрузки. Чтобы сэкономить время 
и&nbsp;ресурсы сети, нужно было объединять, например, иконки, 
в&nbsp;одно большое изображение&nbsp;— спрайт.</p><p>С&nbsp;SPDY или 
HTTP/2 этот метод не&nbsp;нужен, так как эти протоколы созданы для 
параллельного выполнения множества запросов без блокировки друг друга. 
Загрузка одного большого изображения вместо множества изображений 
меньшего размера уже не&nbsp;имеет смысла.</p><p>Следовательно, когда 
это уместно, стоит отказаться от&nbsp;использования спрайтов 
и&nbsp;загружать изображения только тогда, когда они нужны пользователю.</p><h2>6. Поддомены</h2><p>Если
 были созданы поддомены, с&nbsp;которых загружаются статические файлы, 
то&nbsp;для HTTP/2 они становятся неактуальными из-за дополнительных 
подключений. Дополнительные подключения препятствуют выбору приоритетов 
запросов.</p><p>Готово!</p><h2>Настройка поддержки HTTP/2 сервером</h2><p>Теперь поговорим о&nbsp;ситуации, если сервер не&nbsp;поддерживает HTTP/2 из&nbsp;коробки.</p><h3>Nginx</h3><p>Обновите версию сервера Nginx, откройте файл конфигурации <code>/etc/nginx/nginx.conf</code> и&nbsp;отредактируйте&nbsp;его. Вместо строки:</p><pre class="html language-html"><code class="hljs xml">listen 443 SSL
</code></pre><p>Введите значение:</p><pre class="html language-html"><code class="hljs xml">listen 443 ssl http2
</code></pre><p>И&nbsp;обновите сервер командой:</p><pre class="html language-html"><code class="hljs xml">sudo service nginx reload
</code></pre><h3>Apache</h3><p>Если ваш сайт находится на&nbsp;сервере <code>Apache</code>, обновите его до&nbsp;последней версии. Подключите <code>mod_http2</code> и&nbsp;добавьте в&nbsp;файл конфигурации строку:</p><pre class="html language-html"><code class="hljs xml"><span class="hljs-comment">&lt;!-- для https --&gt;</span>
Protocols h2 http/1.1
<span class="hljs-comment">&lt;!-- для http --&gt;</span>
Protocols h2c http/1.1
</code></pre><p>Обновите сервер командой:</p><pre class="html language-html"><code class="hljs xml">sudo service apache reload
</code></pre><p>После установки HTTP/2 проверьте его активность здесь <a href="https://tools.keycdn.com/http2-test">https://tools.keycdn.com/http2-test</a>.</p><p>Готово! Ваше веб-приложение обновлено под HTTP/2.</p><h2>Чек-лист переключения:</h2><ul><li>Проверьте версии браузеров пользователей веб-приложения.</li><li>Убедитесь, что хостинг поддерживает HTTP/2.</li><li>Подключите SSL.</li><li>Избавьтесь от&nbsp;оптимизаций под HTTP/1.x.</li><li>Оптимизируйте проект под HTTP/2.</li></ul></div>

</div></div></div>



</body></html>