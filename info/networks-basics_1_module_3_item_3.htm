<!DOCTYPE html>
<html class="" lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">


<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/octicons-3.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/core.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/text.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/extended-ui-kit.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/up.css"><meta name="theme-color" content="#2d2d44">

</head><body>

              <div class="page-content "><div class="page-content__inner"><div class="up-interface up-interface--up "><section class="up-interface__left-col"><nav class="breadcrumbs"><ul class="breadcrumbs__list"><li class="breadcrumbs__item"><a href="../index.htm">Главная</a></li><li class="breadcrumbs__item"><a href="networks-basics_1_module_3.htm">3. HTTP, HTTP/2, HTTP/3</a></li></ul></nav><article class="up-text"><div class="up-text__head"><h1 class="up-text__title"><svg aria-hidden="true" width="24" height="24"><use xlink:href="/img/sprites/octicons.v10.svg#file-16"></use></svg>
          3.3.&nbsp;Коды статусов HTTP и&nbsp;что с&nbsp;ними делать
        </h1></div><div class="text-container text-container--module"><p>Поговорим
 об&nbsp;ответах сервера на&nbsp;запрос клиента. Допустим, 
вы&nbsp;реализовываете загрузку файла пользователем на&nbsp;странице 
и&nbsp;затем проверяете результат. Сервер может в&nbsp;ответ:</p><ul><li>отправить этот файл, то&nbsp;есть запрос прошёл успешно;</li><li>не&nbsp;отправить, то&nbsp;есть запрос прошёл неуспешно.</li></ul><p>И&nbsp;вместе с&nbsp;результатом выдать трёхзначный код, например:</p><pre class="html language-html"><code class="hljs xml">404 Not found
</code></pre><p>Эти цифры и&nbsp;называются кодами состояния HTTP (англ.
 HTTP status code). Они варьируются от&nbsp;информационных 
и&nbsp;успешных до&nbsp;редиректов и&nbsp;кодов ошибок. Каждый код 
состояния отмечен числовым идентификатором в&nbsp;диапазоне от&nbsp;100 
до&nbsp;599. По&nbsp;этому ответу вы&nbsp;можете понять, что произошло 
и&nbsp;как решить проблему. Давайте углубимся в&nbsp;значения 
идентификаторов.</p><p>За&nbsp;кодом ответа часто следует фраза на&nbsp;английском языке, которая указывает причину ответа.</p><p>Коды сгруппированы в&nbsp;пять классов:</p><ul><li><strong>Коды состояния HTTP 1xx</strong>&nbsp;— информационные ответы. Они указывают на&nbsp;то, что ваш веб-браузер сделал запрос на&nbsp;сервер и&nbsp;ожидает ответа.</li><li><strong>Коды состояния HTTP 2xx</strong>&nbsp;— успешные ответы. Эти коды состояния сообщают клиенту, то&nbsp;есть веб-браузеру, что всё обрабатывается должным образом.</li><li><strong>Коды состояния HTTP 3xx</strong>&nbsp;— перенаправления. Запрос получен, но&nbsp;для его выполнения нужен дополнительный шаг.</li><li><strong>Коды состояния HTTP 4xx</strong>&nbsp;— ошибки на&nbsp;стороне клиента. Клиент сделал запрос, но&nbsp;целевая страница неверна.</li><li><strong>Коды состояния HTTP 5xx</strong>&nbsp;— ошибки на&nbsp;стороне сервера. Запрос клиента был правильным, но&nbsp;сервер не&nbsp;смог его доставить.</li></ul><p>Чтобы было проще понять эту тему, перейдём к&nbsp;бытовой ситуации: вы&nbsp;просите папу передать соль. Ответами могут быть:</p><pre class="html language-html"><code class="hljs xml">100 — соль есть;
200 — держи;
300 — попроси маму;
404 — соль не найдена;
500 — я занят.
</code></pre><p>Как узнать код статуса? В&nbsp;инструментах разработчика во&nbsp;вкладке <code>Network</code>:</p><p><img src="networks-basics_1_module_3_item_3_files/statuses.gif" alt="Как узнать код статуса в инструментах разработчика"></p><p>Знать
 всё не&nbsp;нужно, достаточно запомнить только самые распространённые 
статусы. Остальные при необходимости можно найти здесь: «<a href="https://httpstatuses.com/">Все HTTP-статусы</a>».</p><p>Ниже находится памятка&nbsp;— наиболее распространённые коды статуса HTTP, с&nbsp;которыми сталкиваются разработчики.</p><p>Коды первой сотни&nbsp;— служебные, поэтому очень редко встречаются в&nbsp;работе.</p><p><strong>200&nbsp;— ОК</strong></p><p>Запрос клиента выполнен успешно.</p><p><strong>201&nbsp;— Создан</strong></p><p>Запрос клиента выполнен успешно, и&nbsp;был создан новый ресурс. Это обычный ответ для метода POST и&nbsp;иногда для метода PUT.</p><p><strong>204&nbsp;— Нет содержимого</strong></p><p>Действие
 выполнено успешно, но&nbsp;содержимое не&nbsp;возвращено. Полезно для 
действий, для которых не&nbsp;требуется тело ответа, например для 
DELETE. То&nbsp;есть если вы&nbsp;использовали DELETE, то&nbsp;тело 
ответа не&nbsp;нужно, значит, всё верно.</p><p><strong>301&nbsp;— Переехал навсегда</strong></p><p>Ресурс
 перемещён в&nbsp;другое место, и&nbsp;местоположение известно. Этот 
заголовок особенно полезен, когда URL-адреса меняются с&nbsp;течением 
времени: из-за изменения версии, миграции или какого-либо другого 
изменения.</p><p>Решение: сохранение старых ссылок и&nbsp;перенаправление на&nbsp;новые URL.</p><p><strong>302&nbsp;— Переехал временно</strong></p><p>Запрашиваемый документ был найден и&nbsp;расположен временно по&nbsp;другому адресу.</p><p><strong>304&nbsp;— Не&nbsp;изменён</strong></p><p>Запрошенный
 ресурс не&nbsp;был изменён. Чаще всего используется для кеширования, 
то&nbsp;есть можно не&nbsp;загружать ресурс заново. Полезно использовать
 для высоконагруженных проектов.</p><p>Как это сделать? Возьмём для примера сайт <code>http://example.com</code>. Посмотрим код ответа на&nbsp;загружаемые ресурсы в&nbsp;инструментах разработчика во&nbsp;вкладке <code>Network &gt; Headers</code>:</p><p><img src="networks-basics_1_module_3_item_3_files/example-com-200.png" alt=""></p><p>Прокрутим ниже до&nbsp;Etag&nbsp;— это хеш ресурса:</p><p><img src="networks-basics_1_module_3_item_3_files/example-com-etag.png" alt=""></p><p>В&nbsp;данном случае его значение <code>3147526947+gzip</code>.
 Мы&nbsp;можем указать, что если хеш при загрузке такой&nbsp;же, 
то&nbsp;загружать ресурс ещё раз не&nbsp;надо. Заголовок HTTP-запроса <code>If-None-Match</code> делает запрос условным. Введём этот код в&nbsp;консоли:</p><pre class="JavaScript language-JavaScript"><code class="hljs">fetch(<span class="hljs-string">"http://example.com"</span>, {<span class="hljs-string">"headers"</span>: {<span class="hljs-string">"If-None-Match"</span>: <span class="hljs-string">"3147526947+gzip"</span>}}).then(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> {<span class="hljs-built_in">console</span>.log(a); <span class="hljs-keyword">return</span> a.text()}).then(<span class="hljs-built_in">console</span>.log)
</code></pre><p><img src="networks-basics_1_module_3_item_3_files/example-com-if-none-match.png" alt="If-None-Match"></p><p>И&nbsp;проверим код статуса:</p><p><img src="networks-basics_1_module_3_item_3_files/example-com-304.png" alt=""></p><p>Теперь код статуса 304, и&nbsp;ресурс повторно не&nbsp;загрузился.</p><p><strong>400&nbsp;— Неверный запрос</strong></p><p>В&nbsp;отправленном
 запросе есть проблемы, например, могут отсутствовать некоторые 
обязательные параметры. Часто к&nbsp;ответу 400 добавлено сообщение 
об&nbsp;ошибке, которое вы&nbsp;можете использовать для исправления 
запроса.</p><p><strong>401&nbsp;— Несанкционированный</strong></p><p>Особенно полезно для аутентификации, когда запрошенный ресурс недоступен для пользователя, владеющего запросом.</p><p>Решение: перенаправить пользователя на&nbsp;авторизацию.</p><p><strong>403&nbsp;— Запрещено</strong></p><p>Клиенту отказано в&nbsp;доступе к&nbsp;запрошенному ресурсу из-за отсутствия у&nbsp;клиента необходимых разрешений.</p><p>Причины и&nbsp;решения:</p><ol><li>Нет разрешения на&nbsp;доступ. Решение: открыть доступ на&nbsp;чтение.</li><li>Настройки <code>.htaccess</code>-файла запрещают использование, например, IP-адреса или диапазона IP-адресов. Решение: проверьте настройки <code>.htaccess</code>-файла.</li><li>Нет индексного файла, а&nbsp;списки каталогов не&nbsp;включены. Решение: включите списки каталогов на&nbsp;веб-сервере.</li></ol><p><strong>404&nbsp;— Не&nbsp;найдено</strong></p><p>Предоставленный
 URL-адрес не&nbsp;идентифицирует какой-либо ресурс. Хорошее решение 
к&nbsp;этому ответу&nbsp;— вывод других URL-адресов, которые клиент 
может использовать, чтобы продолжить пользование веб-приложение. Это 
может быть корневой URL, предыдущий использованный URL или другие.</p><p><strong>405&nbsp;— Метод запрещён</strong></p><p>Используемый
 метод HTTP не&nbsp;разрешён для конкретного ресурса. Например, 
выполнение PUT для ресурса с&nbsp;правами только для чтения.</p><p>Решение: поменять метод.</p><p><strong>411&nbsp;— Необходимо указание длины</strong></p><p>Означает, что нужно указать <code>Content-Length</code>.
 Такое бывает, если на&nbsp;сервере есть ограничение на&nbsp;объём. 
Таким образом, сервер не&nbsp;будет загружать ресурс с&nbsp;превышающим 
его возможности объёмом.</p><p>Решение: указать <code>Content-Length</code>.</p><p><strong>414&nbsp;— Слишком длинный URL</strong></p><p>Указывает,
 что URI, запрошенный клиентом, длиннее, чем сервер готов обработать. 
Такое может произойти, когда длинные параметры передаются через метод 
GET, а&nbsp;не&nbsp;POST.</p><p>Решение: изменить метод, сократить длину параметров или увеличить разрешённую длину.</p><p><strong>415&nbsp;— Данный тип медиа не&nbsp;поддерживается</strong></p><p>Сервер отказывается принимать запрос, поскольку формат данных не&nbsp;поддерживается.</p><p>Решение: передать задачу бэкенд-разработчику, чтобы он&nbsp;проверил конфигурации сервера.</p><p><strong>500&nbsp;— Внутренняя ошибка сервера</strong></p><p>Общий
 код ошибки, когда возникает непредвиденное условие и&nbsp;происходит 
сбой сервера. Обычно этот ответ сопровождается сообщением 
об&nbsp;ошибке, объясняющим, что пошло не&nbsp;так. Часто происходит 
из-за отсутствия пакетов (например, при попытке выполнить файл PHP без 
правильной установки PHP) или неправильной конфигурация сервера 
(например, <code>.htaccess</code>-файла).</p><p><strong>503&nbsp;— Сервис недоступен</strong></p><p>Запрос
 не&nbsp;выполнен из-за проблем с&nbsp;сервером. Чаще всего такое 
происходит, когда сервер перезагружается или находится 
на&nbsp;обслуживании. Также код появляется, когда серверу 
не&nbsp;хватает ресурсов или памяти.</p><p>Решение: передать задачу 
бэкенд-разработчику, чтобы веб-сервер мог обрабатывать больше потоков, 
пользователей или процессов, либо обратиться к&nbsp;сисадмину для 
изменения настроек сервера.</p><p><strong>507&nbsp;— Не&nbsp;хватает места</strong></p><p>Серверу не&nbsp;хватает места для выполнения запроса.</p><p>Решение: увеличить место на&nbsp;веб-сервере.</p><h2>Вывод</h2><p>Приведённый
 выше список кодов состояния HTTP не&nbsp;является полным. 
Мы&nbsp;охватили лишь небольшую часть&nbsp;— которые чаще встречаются 
в&nbsp;практике. Полный список статусов HTTP можно найти здесь: «<a href="https://httpstatuses.com/">Все HTTP-статусы</a>».</p></div>


</div></div></div>



</body></html>