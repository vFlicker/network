<!DOCTYPE html>
<html class="" lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">


<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/octicons-3.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/core.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/text.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/extended-ui-kit.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/up.css"><meta name="theme-color" content="#2d2d44">

</head><body>

              <div class="page-content "><div class="page-content__inner"><div class="up-interface up-interface--up "><section class="up-interface__left-col"><nav class="breadcrumbs"><ul class="breadcrumbs__list"><li class="breadcrumbs__item"><a href="../index.htm">Главная</a></li><li class="breadcrumbs__item"><a href="networks-basics_1_module_3.htm">3. HTTP, HTTP/2, HTTP/3</a></li></ul></nav><article class="up-text"><div class="up-text__head"><h1 class="up-text__title"><svg aria-hidden="true" width="24" height="24"><use xlink:href="/img/sprites/octicons.v10.svg#file-16"></use></svg>
          3.5.&nbsp;HTTP/2
        </h1></div><div class="text-container text-container--module"><p>В&nbsp;этой
 статье мы&nbsp;подробно разберём HTTP/2, поговорим о&nbsp;скорости 
и&nbsp;поддержке браузеров. Посмотрим, чем HTTP/2 полезен для сайтов 
и&nbsp;какие у&nbsp;него есть недостатки.</p><p>Каждый раз, когда 
пользователь нажимает на&nbsp;ссылку для посещения веб-приложения, 
на&nbsp;сервер отправляется запрос. Сервер отвечает на&nbsp;него 
сообщением о&nbsp;состоянии (заголовком) и&nbsp;списком файлов для этого
 веб-приложения. После просмотра списка браузер запрашивает файлы 
по&nbsp;одному. Разница между HTTP/1 и&nbsp;HTTP/2 заключается 
в&nbsp;том, что происходит дальше.</p><p>Представьте, что 
вы&nbsp;собираете новый конструктор LEGO. Сначала вы&nbsp;идёте 
в&nbsp;магазин, чтобы купить набор. Когда вы&nbsp;приходите домой, 
то&nbsp;открываете коробку и&nbsp;смотрите инструкции, в&nbsp;которых 
говорится, что вам нужно делать: брать и&nbsp;присоединять <em>по&nbsp;одной детальке за&nbsp;раз</em>.
 То&nbsp;есть для каждой детальки вы&nbsp;должны посмотреть инструкцию, 
чтобы увидеть, какую деталь взять дальше. И&nbsp;так до&nbsp;тех пор, 
пока вы&nbsp;не&nbsp;закончите строить модель конструктора. Если 
в&nbsp;вашем наборе 3000 деталей, это займёт довольно много времени. Так
 работает HTTP/1.</p><p>С&nbsp;HTTP/2 иначе. Когда вы&nbsp;открываете коробку и&nbsp;инструкцию LEGO, то&nbsp;можете запросить <em>сразу все детали</em>,
 используемые в&nbsp;одной части набора. Вы&nbsp;можете продолжать 
получать информацию и&nbsp;новые детали, не&nbsp;тратя время 
на&nbsp;заглядывание в&nbsp;инструкцию. «Эти детали здесь тоже нужны, 
так что вот они». Вы&nbsp;можете получать детали очень быстро, можете 
даже получить все кубики сразу, чтобы собрать набор в&nbsp;одно 
мгновение.</p><p>То&nbsp;есть самое важное нововведение HTTP/2&nbsp;— 
здесь используется одно открытое соединение, в&nbsp;котором запросы 
могут выполняться одновременно. Это называется мультиплексированием.</p><blockquote><p>Мультиплексирование&nbsp;— это одно TCP-соединение для нескольких запросов и&nbsp;ответов.</p></blockquote><h2>Что такое HTTP/2</h2><p>HTTP/2&nbsp;—
 это протокол, который был создан для улучшения процесса передачи 
данных. В&nbsp;HTTP/1 много недостатков, и&nbsp;SPDY был создан, чтобы 
закрыть «дыры» HTTP/1. В&nbsp;2015 году SPDY был интегрирован 
в&nbsp;HTTP/2 и&nbsp;постепенно заменён на&nbsp;него.</p><p>HTTP/2 
ориентирован на&nbsp;оптимизацию потока данных между клиентом 
и&nbsp;сервером. HTTP/2 обратно совместим с&nbsp;HTTP/1, то&nbsp;есть 
веб-приложения будут работать с&nbsp;любым из&nbsp;этих протоколов.</p><p>Когда
 пользователь подключается к&nbsp;серверу, его браузер согласовывает 
сеанс HTTP с&nbsp;сервером. Тип созданного сеанса зависит 
от&nbsp;функций, поддерживаемых клиентом и&nbsp;сервером. Если обе 
стороны поддерживают HTTP/2, сервер начинает работать по&nbsp;протоколу 
HTTP/2.</p><p>Если клиент и&nbsp;сервер поддерживают и&nbsp;готовы 
использовать HTTP/2, они могут использовать такие функции HTTP/2, как 
сжатие, мультиплексирование и&nbsp;push-сервер для оптимизации 
соединения&nbsp;— мы&nbsp;разберём их&nbsp;дальше. Если какая-либо 
из&nbsp;сторон не&nbsp;поддерживает HTTP/2, тогда и&nbsp;браузер, 
и&nbsp;сервер возвращаются к&nbsp;HTTP/1.</p><h2>Разница в&nbsp;скорости между HTTP/1 и&nbsp;HTTP/2</h2><p>Замерить скорость загрузки по&nbsp;HTTP/1 и&nbsp;HTTP/2 можно по&nbsp;тестам <a href="https://up.htmlacademy.ru/networks-basics/1/articles/s8w1tnky8fahhu/HttpWatch">https://www.httpwatch.com/</a>.
 В&nbsp;среднем, HTTP/2 + HTTPS ускоряет загрузку на&nbsp;23%. Проверить
 скорость загрузки сайтов на&nbsp;разных протоколах можно в&nbsp;сервисе
 <a href="https://www.httpvshttps.com/">HTTP vs&nbsp;HTTPS</a>.</p><h2>Особенности HTTP/2</h2><ol><li>HTTP-сообщения
 разбиваются на&nbsp;один или несколько фреймов с&nbsp;общим заголовком.
 Это сокращает дополнительное время приёма-передачи (RTT), ускоряя 
загрузку сайта без какой-либо оптимизации.</li></ol><p><img src="networks-basics_1_module_3_item_5_files/http1-and-http2-frames.jpg" alt="Фреймы сообщения HTTP/2"></p><ol start="2"><li><p>Заголовки сжимаются при помощи алгоритма HPACK. Происходит сокращение информации для обмена между браузером и&nbsp;сервером.</p></li><li><p>HTTP/2
 мультиплексирован. В&nbsp;HTTP/1 для каждого запроса нужно 
устанавливать отдельное TCP-соединение, и&nbsp;единовременное количество
 TCP-соединений ограничено. С&nbsp;HTTP/2 клиент и&nbsp;сервер могут 
отправлять множество запросов и&nbsp;ответов в&nbsp;одном 
TCP-соединении.</p></li></ol><p><img src="networks-basics_1_module_3_item_5_files/multiplexing-timeline.jpg" alt="HTTP/2 мультиплексирование таймлайн"></p><p>Как результат, более быстрая загрузка.</p><ol start="4"><li>Параллельный запрос статических элементов:</li></ol><p><img src="networks-basics_1_module_3_item_5_files/multiplexing.jpg" alt="HTTP/2 мультиплексирование"></p><ol start="5"><li>Реализован
 push-сервер&nbsp;— возможность сервера отправлять несколько ответов 
на&nbsp;один клиентский запрос. Например, если клиент запрашивает файл <code>form.html</code>, а&nbsp;для его загрузки нужны файлы <code>form-script.js</code> и&nbsp;<code>icon-form.svg</code>, то&nbsp;сервер отправит сразу три файла:</li></ol><p><img src="networks-basics_1_module_3_item_5_files/push-server.jpg" alt=""></p><p>В&nbsp;этом случае кеш браузера может быть очищен или обновлён.</p><p>То&nbsp;есть
 сервер знает о&nbsp;многих дополнительных ресурсах, которые потребуются
 странице, и&nbsp;может начать отправлять эти ресурсы, отвечая 
на&nbsp;первоначальный запрос. Это позволяет серверу полностью 
использовать сеть и&nbsp;сократить время загрузки страниц.</p><ol start="6"><li><p>Это
 бинарный протокол, а&nbsp;не&nbsp;текстовый, как HTTP/1, что устраняет 
проблемы безопасности, связанные с&nbsp;передачей текста в&nbsp;HTTP.</p></li><li><p>Улучшен
 процесс распределения приоритетов, то&nbsp;есть браузеру отдаются 
сначала наиболее важные файлы. В&nbsp;SPDY приоритизация осуществлялась 
по&nbsp;более простому алгоритму. Приоритизация запросов учитывает 
их&nbsp;вес и&nbsp;зависимость друг от&nbsp;друга.</p></li><li><p>Менее подвержен ошибкам и&nbsp;занимает меньше места в&nbsp;сети.</p></li><li><p>Веб-разработчикам проще работать за&nbsp;счёт исключения HTTP-оптимизаций.</p></li><li><p>HTTP/2
 подразумевает использование веб-приложением безопасного 
HTTPS-соединения. Популярные браузеры, Chrome и&nbsp;Firefox, 
поддерживают HTTP/2 только поверх&nbsp;TLS. Есть возможность работы 
HTTP/2 с&nbsp;использованием обычного TCP, то&nbsp;есть без 
дополнительной защиты, но&nbsp;лучше так не&nbsp;делать.</p></li><li><p>Все ресурсы сохраняются в&nbsp;кеше.</p></li></ol><p>Таким
 образом, уменьшается задержка сети и&nbsp;улучшается пропускная 
способность. На&nbsp;момент начала 2022 года широко поддерживается 
браузерами:</p><p><img src="networks-basics_1_module_3_item_5_files/can-i-use-http2.jpeg" alt="Can I use HTTP/2"></p><h2>Недостатки HTTP/2</h2><ol><li><p>Блокировка заголовка на&nbsp;уровне TCP по-прежнему вызывает проблемы. Это значительно улучшено протоколом HTTP/3.</p></li><li><p>Каждое соединение требует больших объёмов памяти по&nbsp;сравнению с&nbsp;HTTP.</p></li><li><p>Не&nbsp;всегда
 нужно использовать безопасное соединение. Например, в&nbsp;этом нет 
смысла, когда информация уже зашифрована или нет необходимости защиты.</p></li><li><p>Нужно удалять оптимизации под HTTP/1.</p></li><li><p>Веб-приложения с&nbsp;ресурсоёмкими аудио и&nbsp;видеопотоками работают медленнее.</p></li><li><p>Использование
 одновременных запросов увеличивает нагрузку на&nbsp;сервер, что 
приводит к&nbsp;тайм-аутам запросов. Для клиентов с&nbsp;медленным 
сетевым подключением количество пакетов будет постепенно падать, 
и&nbsp;качество сети ухудшится до&nbsp;одного подключения HTTP/2. Это 
замедляет весь процесс и&nbsp;блокирует передачу данных.</p></li><li><p>Постепенное
 снижение гибкости протокола (известное как окостенение) становится 
проблемой для устройств, настроенных для приёма TCP или UDP.</p></li></ol></div>

</div></div></div>



</body></html>