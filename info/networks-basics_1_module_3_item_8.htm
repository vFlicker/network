<!DOCTYPE html>
<html class="" lang="ru"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">


<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/octicons-3.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/core.css">
<link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/text.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/extended-ui-kit.css"><link rel="stylesheet" href="networks-basics_1_module_1_item_1_files/up.css"><meta name="theme-color" content="#2d2d44">

</head><body>

              <div class="page-content "><div class="page-content__inner"><div class="up-interface up-interface--up "><section class="up-interface__left-col"><nav class="breadcrumbs"><ul class="breadcrumbs__list"><li class="breadcrumbs__item"><a href="../index.htm">Главная</a></li><li class="breadcrumbs__item"><a href="networks-basics_1_module_3.htm">3. HTTP, HTTP/2, HTTP/3</a></li></ul></nav><article class="up-text"><div class="up-text__head"><h1 class="up-text__title"><svg aria-hidden="true" width="24" height="24"><use xlink:href="/img/sprites/octicons.v10.svg#file-16"></use></svg>
          3.8.&nbsp;WebSockets
        </h1></div><div class="text-container text-container--module"><p>В&nbsp;этой
 статье мы&nbsp;расскажем, что такое WebSockets и&nbsp;как его 
использовать для передачи данных. Начнём с&nbsp;процесса передачи данных
 без WebSockets: посмотрим, какие сложности при этом происходят 
и&nbsp;как протокол WebSocket их&nbsp;решает.</p><p>Клиент делает запрос
 на&nbsp;сервер для передачи каждого ресурса. Затем сервер отвечает 
на&nbsp;запрос, отправляя ресурс. Иными словами, HTTP работает 
по&nbsp;базовой архитектуре «запрос-ответ». При этом каждый раз 
происходит трёхстороннее «рукопожатие», что приводит к&nbsp;значительной
 задержке.</p><p>С&nbsp;протоколом WebSocket гораздо проще. Всё, что 
нужно сделать клиенту,&nbsp;— установить соединение с&nbsp;сервером, 
передав «рукопожатие» для протокола WebSocket. Это «рукопожатие» 
предоставляет всю необходимую идентифицирующую информацию для передачи 
данных. Канал после него остаётся открытым, чтобы обеспечить почти 
постоянную связь. Это означает, что сервер может доставлять данные 
самостоятельно, без запроса от&nbsp;клиента. Также, если сервер получает
 новые данные, он&nbsp;доставляет их&nbsp;клиенту без специального 
запроса.</p><blockquote><p>WebSockets поддерживает постоянное соединение
 между клиентом и&nbsp;сервером. Во&nbsp;время этого соединения клиент 
и&nbsp;сервер могут отправлять ресурсы без запроса и&nbsp;в&nbsp;любое 
время.</p></blockquote><h2>Как работает WebSockets</h2><p>Рассмотрим 
подробнее, как создаётся WebSocket-соединение. Сначала клиент, 
то&nbsp;есть браузер, отправляет на&nbsp;сервер HTTP-запрос, как при 
обычном HTTP-соединении. В&nbsp;заголовке указана информация о&nbsp;том,
 что клиент хочет установить WebSocket-соединение.</p><p><img src="networks-basics_1_module_3_item_8_files/websocket-connection-1.jpeg" alt="Клиент спрашивает сервер о поддержке WebSocket"></p><p>Если сервер готов работать через протокол WebSocket, он&nbsp;ответит согласием:</p><p><img src="networks-basics_1_module_3_item_8_files/websocket-connection-2.jpeg" alt="Сервер отвечает о поддержке WebSocket"></p><p>И&nbsp;включит в&nbsp;заголовок ответ с&nbsp;кодом 101 и&nbsp;информацией о&nbsp;переключении на&nbsp;протокол WebSocket:</p><p><img src="networks-basics_1_module_3_item_8_files/websocket-connection-3.jpeg" alt="Заголовок сервер о переходе на WebSocket"></p><p>Этот
 процесс называется WebSocket-«рукопожатием». На&nbsp;этом моменте 
WebSocket-«рукопожатие» завершено. Теперь и&nbsp;клиент, и&nbsp;сервер 
могут отправлять данные через WebSocket-соединение. Закрыть WebSocket 
соединение могут и&nbsp;клиент, и&nbsp;сервер.</p><p>URL-адрес WebSocket использует схему <code>ws://</code>для обмена открытым текстом:</p><p><img src="networks-basics_1_module_3_item_8_files/websocket-connection-ws.jpeg" alt="URL для обмена открытым текстом"></p><p>WebSocket поверх TLS использует схему <code>wss://</code>:</p><p><img src="networks-basics_1_module_3_item_8_files/websocket-connection-wss.jpeg" alt="URL для работы поверх TLS"></p><p>WebSocket-соединение поверх TLS аналогичен HTTPS, когда HTTP работает поверх TLS.</p><h2>Поддержка браузерами WebSockets</h2><p>WebSockets поддерживаются во&nbsp;всех современных браузерах:</p><p><img src="networks-basics_1_module_3_item_8_files/caniuse-websocket.png" alt="Поддержка браузерами WebSockets"></p><h2>Мониторинг трафика WebSocket с&nbsp;помощью Chrome Dev Tools</h2><p>Инструменты
 разработчика Google Chrome включают функцию мониторинга трафика через 
WebSocket. Чтобы получить доступ к&nbsp;этому инструменту, нужно 
выполнить следующие действия:</p><ul><li>откройте инструменты разработчика;</li><li>переключитесь на&nbsp;вкладку <code>Network</code>;</li><li>нажмите на&nbsp;запись подключения WebSocket;</li><li>переключитесь на&nbsp;вкладку <code>Frames</code>.</li></ul><p>Эти инструменты покажут сводку всех данных, отправленных через соединение.</p><h2>WebSockets на&nbsp;сервере</h2><p>Мы&nbsp;сосредоточились
 на&nbsp;использовании WebSockets с&nbsp;точки зрения клиентской 
стороны. Для создания собственного сервера WebSocket существует 
множество библиотек. Одна из&nbsp;самых популярных&nbsp;— <a href="https://socket.io/">socket.io</a>.</p><h2>Итог</h2><p>Технология
 WebSocket предназначена для того, чтобы сделать интернет быстрее 
и&nbsp;динамичнее. Это протокол, необходимый для современных 
веб-приложений, требующих более быстрого взаимодействия, чем может 
обеспечить стандартное HTTP-соединение. Однако не&nbsp;следует 
отказываться от&nbsp;HTTP: он&nbsp;по-прежнему остаётся важным 
интернет-протоколом.</p><p>Перейдём к&nbsp;практике и&nbsp;научимся использовать WebSockets.</p></div>

</div></div></div>



</body></html>